pku	eng	B-OJ
 	x	I-OJ
1141	m	I-OJ
 	x	O
Brackets	eng	O
 	x	O
Sequence	eng	O
(	x	O
DP	eng	B-KNOWLEDGE
)	x	O
 	x	O
-	x	O
 	x	O
low	eng	O
 	x	O
coder	eng	O
 	x	O
-	x	O
 	x	O
博客	nr	O
频道	n	O
 	x	O
-	x	O
 	x	O
CSDN	eng	O
.	m	O
NET	eng	O

	x	O

	x	O
 	x	O

	x	O
首先	d	O
，	x	O
大家	n	O
都	d	O
来	v	O
鄙视	v	O
我	r	O
吧	y	O
，	x	O
这	r	O
道	q	O
题目	n	O
我	r	O
花	v	O
了	ul	O
一天	m	O
时间	n	O
才	d	O
勉强	v	O
 	x	O
AC	eng	O
 	x	O
。	x	O

 	x	O

	x	O
 	x	O

	x	O
题目	n	O
大意	d	O
 	x	O
:	x	O
 	x	O
输入	v	O
一个	m	O
由	p	O
‘	x	O
 	x	O
(	x	O
 	x	O
’	x	O
、	x	O
‘	x	O
 	x	O
 	x	O
)	x	O
 	x	O
’	x	O
、	x	O
‘	x	O
 	x	O
 	x	O
[	x	O
 	x	O
’	x	O
、	x	O
‘	x	O
 	x	O
 	x	O
]	x	O
 	x	O
’	x	O
 	x	O
 	x	O
4	x	O
 	x	O
种	m	O
符号	n	O
构成	v	O
的	uj	O
杂乱	n	O
序列	n	O
，	x	O
通过	p	O
给	p	O
这个	r	O
序列	n	O
在	p	O
恰当	d	O
的	uj	O
位置	v	O
增加	v	O
一些	m	O
‘	x	O
 	x	O
(	x	O
 	x	O
’	x	O
、	x	O
‘	x	O
 	x	O
 	x	O
)	x	O
 	x	O
’	x	O
、	x	O
‘	x	O
 	x	O
 	x	O
[	x	O
 	x	O
’	x	O
、	x	O
‘	x	O
 	x	O
 	x	O
]	x	O
 	x	O
’	x	O
，	x	O
可以	c	O
使	v	O
原来	d	O
的	uj	O
序列	n	O
变成	v	O
 	x	O
regular	eng	O
 	x	O
sequence	eng	O
 	x	O
（	x	O
即	v	O
是	v	O
通常	d	O
意义	n	O
上	f	O
的	uj	O
括号	n	O
配对	v	O
）	x	O
。	x	O

输出	v	O
在	p	O
原	n	O
序列	n	O
基础	n	O
上	f	O
增添	v	O
后	f	O
的	uj	O
 	x	O
regular	eng	O
 	x	O
sequence	eng	O
 	x	O
，	x	O
要求	v	O
增加	v	O
的	uj	O
符号	n	O
尽量少	l	O
。	x	O

（	x	O
结果	n	O
可能	v	O
有	v	O
很	d	O
多种	m	O
，	x	O
只要	c	O
输出	v	O
其中	r	O
的	uj	O
一种	m	O
就	d	O
可以	c	O
了	ul	O
）	x	O
 	x	O

	x	O
 	x	O

	x	O
分析	vn	O
：	x	O
 	x	O

	x	O
 	x	O

	x	O
DP	eng	O
 	x	O
，	x	B-KNOWLEDGE
 	x	I-KNOWLEDGE
int	eng	O
 	x	O
state	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
j	x	O
]	x	O
 	x	O
表示	v	O
将	d	O
原	d	O
序列	n	O
中	f	O
第	m	O
 	x	O
i	x	O
 	x	O
至	p	O
第	m	O
 	x	O
j	x	O
 	x	O
个	q	O
符号	n	O
变为	v	O
 	x	O
regular	eng	O
 	x	O
sequence	eng	O
 	x	O
后	f	O
，	x	O
总共	b	O
的	uj	O
符号	n	O
数量	n	O
，	x	O
 	x	O
string	eng	O
 	x	O
ans	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
j	x	O
]	x	O
 	x	O
 	x	O
表示	v	O
将	d	O
原	d	O
序列	n	O
中	f	O
以	p	O
第	m	O
 	x	O
i	x	O
 	x	O
至	p	O
第	m	O
 	x	O
j	x	O
 	x	O
个	q	O
符号	n	O
变换	v	O
成	v	O
的	uj	O
 	x	O
regular	eng	O
 	x	O
sequence	eng	O
 	x	O
。	x	O

 	x	O

	x	O
 	x	O

	x	O
If	eng	O
 	x	O
A	x	O
 	x	O
and	eng	O
 	x	O
B	x	O
 	x	O
are	eng	O
 	x	O
regular	eng	O
 	x	O
sequences	eng	O
,	x	O
 	x	O
then	eng	O
 	x	O
AB	eng	O
 	x	O
is	eng	O
 	x	O
a	x	O
 	x	O
regular	eng	O
 	x	O
sequence	eng	O
.	m	O
 	x	O
 	x	O

	x	O
 	x	O

	x	O
于是	c	O
有	v	O
 	x	O
state	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
j	x	O
]	x	O
=	x	O
min	eng	O
(	x	O
state	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
k	x	O
]	x	O
+	x	O
state	eng	O
[	x	O
k	eng	O
+	x	O
1	m	O
]	x	O
[	x	O
j	x	O
]	x	O
)	x	O
 	x	O
，	x	O
其中	r	O
 	x	O
i	x	O
<	x	O
=	x	O
k	x	O
<	x	O
j	x	O
 	x	O
。	x	O

 	x	O

	x	O
 	x	O

	x	O
If	eng	O
 	x	O
S	x	O
 	x	O
is	eng	O
 	x	O
a	x	O
 	x	O
regular	eng	O
 	x	O
sequence	eng	O
,	x	O
 	x	O
then	eng	O
 	x	O
(	x	O
S	x	O
)	x	O
 	x	O
and	eng	O
 	x	O
[	x	O
S	x	O
]	x	O
 	x	O
are	eng	O
 	x	O
both	eng	O
 	x	O
regular	eng	O
 	x	O
sequences	eng	O
.	m	O
 	x	O

	x	O
 	x	O

	x	O
于是	c	O
如果	c	O
 	x	O
sym	eng	O
[	x	O
i	x	O
]	x	O
 	x	O
和	c	O
 	x	O
sym	eng	O
[	x	O
j	x	O
]	x	O
 	x	O
本身	r	O
就是	d	O
配对	v	O
的	uj	O
 	x	O
，	x	O
 	x	O
那么	r	O
 	x	O
state	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
j	x	O
]	x	O
=	x	O
min	eng	O
(	x	O
state	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
j	x	O
]	x	O
,	x	O
state	eng	O
[	x	O
i	eng	O
+	x	O
1	m	O
]	x	O
[	x	O
j	x	O
-	x	O
1	x	O
]	x	O
+	x	O
2	m	O
)	x	O
 	x	O
。	x	O

（	x	O
我	r	O
一	m	O
开始	v	O
想	v	O
如果	c	O
 	x	O
sym	eng	O
[	x	O
i	x	O
]	x	O
 	x	O
和	c	O
 	x	O
sym	eng	O
[	x	O
j	x	O
]	x	O
 	x	O
本身	r	O
就是	d	O
配对	v	O
的	uj	O
 	x	O
,	x	O
 	x	O
那么	r	O
肯定	v	O
 	x	O
state	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
j	x	O
]	x	O
=	x	O
 	x	O
state	eng	O
[	x	O
i	eng	O
+	x	O
1	m	O
]	x	O
[	x	O
j	x	O
-	x	O
1	x	O
]	x	O
+	x	O
2	m	O
)	x	O
 	x	O
，	x	O
其实不然	l	O
，	x	O
比如说	l	O
“	x	O
 	x	O
(	x	O
)	x	O
(	x	O
)	x	O
 	x	O
”	x	O
，	x	O
 	x	O
i	x	O
=	x	O
1	x	O
,	x	O
j	x	O
=	x	O
4	x	O
 	x	O
这种	r	O
情况	n	O
）	x	O
。	x	O

 	x	O

	x	O
 	x	O

	x	O
还有	v	O
，	x	O
以前	f	O
不	d	O
知道	v	O
在	p	O
 	x	O
C++	nz	O
 	x	O
中	f	O
有个	r	O
这样	r	O
好用	v	O
的	uj	O
 	x	O
string	eng	O
 	x	O
类型	n	O
（	x	O
囧	zg	O
）	x	O
，	x	O
是	v	O
这次	r	O
看	v	O
别人	r	O
代码	n	O
才	d	O
会用	v	O
的	uj	O
。	x	O

 	x	O

	x	O
 	x	O

	x	O
#	x	O
include	eng	O
 	x	O
<	x	O
iostream	eng	O
>	x	O

	x	O
using	eng	O
 	x	O
namespace	eng	O
 	x	O
std	eng	O
;	x	O

	x	O
#	x	O
include	eng	O
 	x	O
<	x	O
string	eng	O
>	x	O

	x	O
#	x	O
define	eng	O
 	x	O
LeftMatch	eng	O
(	x	O
x	x	O
)	x	O
 	x	O
(	x	O
x	x	O
=	x	O
=	x	O
'	x	O
(	x	O
'	x	O
?	x	O
'	x	O
)	x	O
'	x	O
:	x	O
'	x	O
]	x	O
'	x	O
)	x	O

	x	O
#	x	O
define	eng	O
 	x	O
IfMatch	eng	O
(	x	O
x	x	O
,	x	O
y	x	O
)	x	O
 	x	O
(	x	O
y	x	O
=	x	O
=	x	O
LeftMatch	eng	O
(	x	O
x	x	O
)	x	O
?	x	O
1	x	O
:	x	O
0	x	O
)	x	O

	x	O
void	eng	O
 	x	O
Init	eng	O
(	x	O
)	x	O
;	x	O

	x	O
void	eng	O
 	x	O
DP	eng	O
(	x	O
)	x	O
;	x	O

	x	O
char	eng	O
 	x	O
sym	eng	O
[	x	O
105	m	O
]	x	O
;	x	O

	x	O
int	eng	O
 	x	O
count	eng	O
[	x	O
105	m	O
]	x	O
[	x	O
105	m	O
]	x	O
;	x	O

	x	O
string	eng	O
 	x	O
ans	eng	O
[	x	O
105	m	O
]	x	O
[	x	O
105	m	O
]	x	O
;	x	O

	x	O
int	eng	O
 	x	O
n	x	O
;	x	O

	x	O
int	eng	O
 	x	O
main	eng	O
(	x	O
)	x	O

	x	O
{	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
cin	eng	O
.	m	O
getline	eng	O
(	x	O
sym	eng	O
+	x	O
1	m	O
,	x	O
105	m	O
)	x	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
Init	eng	O
(	x	O
)	x	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
DP	eng	O
(	x	O
)	x	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
cout	eng	O
<	x	O
<	x	O
ans	eng	O
[	x	O
1	x	O
]	x	O
[	x	O
n	x	O
]	x	O
<	x	O
<	x	O
endl	eng	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
return	eng	O
 	x	O
0	x	O
;	x	O

	x	O
}	x	O

	x	O
void	eng	O
 	x	O
Init	eng	O
(	x	O
)	x	O

	x	O
{	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
n	x	O
=	x	O
strlen	eng	O
(	x	O
sym	eng	O
+	x	O
1	m	O
)	x	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
memset	eng	O
(	x	O
count	eng	O
,	x	O
0	x	O
,	x	O
sizeof	eng	O
(	x	O
count	eng	O
)	x	O
)	x	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
for	eng	O
(	x	O
int	eng	O
 	x	O
i	x	O
=	x	O
1	x	O
;	x	O
i	x	O
<	x	O
=	x	O
n	x	O
;	x	O
i	eng	O
++	x	O
)	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
{	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
count	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
i	x	O
]	x	O
=	x	O
2	x	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
if	eng	O
(	x	O
sym	eng	O
[	x	O
i	x	O
]	x	O
=	x	O
=	x	O
'	x	O
(	x	O
'	x	O
|	x	O
|	x	O
sym	eng	O
[	x	O
i	x	O
]	x	O
=	x	O
=	x	O
'	x	O
)	x	O
'	x	O
)	x	O
 	x	O
ans	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
i	x	O
]	x	O
=	x	O
"	x	O
(	x	O
)	x	O
"	x	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
else	eng	O
 	x	O
ans	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
i	x	O
]	x	O
=	x	O
"	x	O
[	x	O
]	x	O
"	x	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
}	x	O

	x	O
}	x	O

	x	O
void	eng	O
 	x	O
DP	eng	O
(	x	O
)	x	O

	x	O
{	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
for	eng	O
(	x	O
int	eng	O
 	x	O
l	x	O
=	x	O
1	x	O
;	x	O
l	x	O
<	x	O
n	x	O
;	x	O
l	eng	O
++	x	O
)	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
{	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
for	eng	O
(	x	O
int	eng	O
 	x	O
i	x	O
=	x	O
1	x	O
;	x	O
i	eng	O
+	x	O
l	eng	O
<	x	O
=	x	O
n	x	O
;	x	O
i	eng	O
++	x	O
)	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
{	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
count	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
i	eng	O
+	x	O
l	eng	O
]	x	O
=	x	O
INT	eng	O
_	x	O
MAX	eng	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
if	eng	O
(	x	O
(	x	O
sym	eng	O
[	x	O
i	x	O
]	x	O
=	x	O
=	x	O
'	x	O
(	x	O
'	x	O
|	x	O
|	x	O
sym	eng	O
[	x	O
i	x	O
]	x	O
=	x	O
=	x	O
'	x	O
[	x	O
'	x	O
)	x	O
&&	x	O
IfMatch	eng	O
(	x	O
sym	eng	O
[	x	O
i	x	O
]	x	O
,	x	O
sym	eng	O
[	x	O
i	eng	O
+	x	O
l	eng	O
]	x	O
)	x	O
)	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
{	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
count	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
i	eng	O
+	x	O
l	eng	O
]	x	O
=	x	O
count	eng	O
[	x	O
i	eng	O
+	x	O
1	m	O
]	x	O
[	x	O
i	eng	O
+	x	O
l	eng	O
-	x	O
1	x	O
]	x	O
+	x	O
2	m	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
if	eng	O
(	x	O
sym	eng	O
[	x	O
i	x	O
]	x	O
=	x	O
=	x	O
'	x	O
(	x	O
'	x	O
)	x	O
 	x	O
ans	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
i	eng	O
+	x	O
l	eng	O
]	x	O
=	x	O
'	x	O
(	x	O
'	x	O
+	x	O
ans	eng	O
[	x	O
i	eng	O
+	x	O
1	m	O
]	x	O
[	x	O
i	eng	O
+	x	O
l	eng	O
-	x	O
1	x	O
]	x	O
+	x	O
'	x	O
)	x	O
'	x	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
else	eng	O
 	x	O
ans	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
i	eng	O
+	x	O
l	eng	O
]	x	O
=	x	O
'	x	O
[	x	O
'	x	O
+	x	O
ans	eng	O
[	x	O
i	eng	O
+	x	O
1	m	O
]	x	O
[	x	O
i	eng	O
+	x	O
l	eng	O
-	x	O
1	x	O
]	x	O
+	x	O
'	x	O
]	x	O
'	x	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
}	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
for	eng	O
(	x	O
int	eng	O
 	x	O
k	x	O
=	x	O
i	x	O
;	x	O
k	x	O
<	x	O
i	eng	O
+	x	O
l	eng	O
;	x	O
k	eng	O
++	x	O
)	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
{	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
if	eng	O
(	x	O
count	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
i	eng	O
+	x	O
l	eng	O
]	x	O
>	x	O
count	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
k	x	O
]	x	O
+	x	O
count	eng	O
[	x	O
k	eng	O
+	x	O
1	m	O
]	x	O
[	x	O
i	eng	O
+	x	O
l	eng	O
]	x	O
)	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
{	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
count	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
i	eng	O
+	x	O
l	eng	O
]	x	O
=	x	O
count	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
k	x	O
]	x	O
+	x	O
count	eng	O
[	x	O
k	eng	O
+	x	O
1	m	O
]	x	O
[	x	O
i	eng	O
+	x	O
l	eng	O
]	x	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
ans	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
i	eng	O
+	x	O
l	eng	O
]	x	O
=	x	O
ans	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
k	x	O
]	x	O
+	x	O
ans	eng	O
[	x	O
k	eng	O
+	x	O
1	m	O
]	x	O
[	x	O
i	eng	O
+	x	O
l	eng	O
]	x	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
}	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
}	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
}	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
}	x	O

	x	O
}	x	O

	x	O