PKU_1141_唐武的空间_百度空间

//多多指教
#include <iostream>
#include <string>
#include <cmath>
using namespace std;
const int NUM = 101;
int Min[NUM][NUM]; //Min[i][j]表示第i个字符到第j个字符规则化需要的最少字符数,这个似乎不用计算！
string Ans[NUM][NUM]; //Ans[i][j]表示第i个字符到第j个字符组成的串经过最优化后的字符串
bool cal[NUM][NUM]; //Cal[i][j]为真表示Min[i][j]和Ans[i][j]已经算出
string s; //s为输入的字符串
int n; //n为字符的个数
void Init();
//inline string min(string s1, string s2); //返回长度最短的字符串
int main()
{
cin >>s;
n = s.length();
s.insert(s.begin(), 'O');
Init();
int i, j, p, k;
//这里的循环控制应该使得计算由i和j的差值由小到大
for(p = 1; p < n; p++) //p表示j和i的差值
   for(i = 1; i <= n - p; i++)
   {
    j = i + p;
    Min[i][j] = INT_MAX;
    if((s[i] == '(' && s[j] == ')') || (s[i] == '[' && s[j] == ']'))
    {
     Min[i][j] = Min[i + 1][j - 1];
     if(s[i] == '(')
      Ans[i][j] = '(' + Ans[i + 1][j - 1] + ')';
     else
      if(s[i] == '[')
       Ans[i][j] = '[' + Ans[i + 1][j - 1] + ']';
    }
    if(s[i] == '(' || s[i] == '[') //需要替换
    {
     if(Min[i][j] > Min[i + 1][j] + 1 && cal[i + 1][j]) //Min[i + 1][j]必须已经计算过了
     {
      Min[i][j] = Min[i + 1][j] + 1;
      if(s[i] == '(')
       Ans[i][j] = '(' + Ans[i + 1][j] + ')';
        else
       Ans[i][j] = '[' + Ans[i + 1][j] + ']';
     }
    }
    if(s[j] == ']' || s[j] == ')') //需要替换,当s[j]为'('或者'['时就不会有这种情况
    {
     if(Min[i][j] > Min[i][j - 1] + 1 && cal[i][j - 1])
     {
      Min[i][j] = Min[i][j - 1] + 1;
      if(s[j] == ')')
       Ans[i][j] = '(' + Ans[i][j - 1] + ')';
      else
       Ans[i][j] = '[' + Ans[i][j - 1] + ']';
     }
    }
    for(k = i; k < j; k++)
    {
     if((Min[i][j] > Min[i][k] + Min[k + 1][j]) && cal[i][k] && cal[k + 1][j]) //需要替换
     {
      Min[i][j] = Min[i][k] + Min[k + 1][j];
      Ans[i][j] = Ans[i][k] + Ans[k + 1][j];
     }
    }
    cal[i][j] = true;
    //cout <<i<<" "<<j<<endl<<Min[i][j]<<endl;
    //cout <<i<<" "<<j<<endl<<Ans[i][j]<<endl;
   }
/*for(i = 1; i <= n; i++)
   for(j = i; j <= n; j++)
    cout <<i<<" "<<j<<endl<<Ans[i][j]<<endl;*/ 
cout <<Ans[1][n]<<endl;
return 0;
}
//测试[([)[[([)]
void Init()
{
for(int i = 1; i <= n; i++)
{
   for(int j = 1; j <= n; j++)
    cal[i][j] = false;
   Min[i][i] = cal[i][i] = cal[i][i - 1] = 1;
   Min[i][i - 1] = 0;
   if(s[i] == '(' || s[i] == ')')
    Ans[i][i] = "()";
   else
    Ans[i][i] = "[]";
   Ans[i][i - 1] = "";
}
}
