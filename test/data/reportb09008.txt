又一线段树 PKU 2464_下雪的天空_新浪博客

题目的意思是Stan和Ollie玩一个游戏，在一个平面上有很多点，Stan选择一个点，通过这个点作y轴，在这条直线通过的点中选择一个点（有可能会多个，因为x会一样）, 然后Ollie通过这个点作一个x轴,于是Stan的分数就是第一象限然和第三象限的点的个数，Ollie的分数是第二和第四象限的点的个数。由于2个人都想分数最高，Stan会让所取y轴通过的点的分数的最小值，在这些所有的最小值中取最大值，同样Ollie会在Stan取到的y轴中选自己分数最大的点，现在要求输出Stan和Ollie能取到的最大值。似乎，这样分析下来，这个题不难了，只要对x排序,然后遍历一遍，每次算出它所得的分数，注意上述中说的在同一直线的情况，但是再一看数据是200000，5S,普通的查询肯定是不可以的，肯定会卡时间，于是想某种结构，可以快速查询以及维护的，最终应该可以是查找树，不过我用了线段树来实现，还有考虑有负数，而且没有给数的范围，于是考虑给y离散化。
代码：
 
#include <iostream>
 
#include <vector>
 
#include <algorithm>
 
#define inf 1<<30
 
#define max(x,y)x>y?x:y
 
#define min(x,y)x<y?x:y
 
#define maxn 200020
 
#define maxt 1000000
 
#define l(a) a<<1
 
#define r(a) (a<<1)+1
 
using namespace std;
 
int tmp,tt,t,t1,t2,i,j,k,ans,pos,ans1[maxn],ans2[maxn];
 
vector<int> mm;
 
struct point
 
{
 
     bool operator<(const point& t)const
 
     {
 
         return x<t.x;
 
     }
 
     int x,y;
 
};
 
point p[maxn];
 
struct py
 
{
 
     bool operator<(const py& t)const
 
     {
 
         return y<t.y;
 
     }
 
     int id,y;
 
};
 
py y[maxn];
 
struct segment_tree
 
{
 
     int l,r,count;//count用来记录值
 
};
 
segment_tree tree[maxt];
 
void build(int node,int l,int r)
 
{
 
     tree[node].l=l;
 
     tree[node].r=r;
 
     tree[node].count=0;
 
     if(l==r)return;
 
     int mid=(l+r)>>1;
 
     build(l(node),l,mid);
 
     build(r(node),mid+1,r);
 
}
 
void update(int node,int l,int r)
 
{
 
     //if(node>=maxt)return;
 
     if(tree[node].l==l&&tree[node].r==r)
 
     {
 
         tree[node].count++;
 
         return;
 
     }
 
     int mid=(tree[node].l+tree[node].r)>>1;
 
     if(r<=mid)update(l(node),l,r);
 
     else if(l>mid)update(r(node),l,r);
 
     else
 
     {
 
         update(l(node),l,mid);
 
         update(r(node),mid+1,r);
 
     }
 
     tree[node].count++;//更新出比查询值小的数的个数
 
     return;
 
}
 
int query(int node,int l,int r)
 
{
 
     //if(node>=maxt)return -1;
 
     segment_tree *tt=&tree[node];
 
     if(tt->l==l&&tt->r==r)return tree[node].count;
 
     int mid=(tt->l+tt->r)>>1;
 
     if(r<=mid)return query(l(node),l,r);
 
     else if(l>mid)return query(r(node),l,r);
 
     else return query(l(node),l,mid)+query(r(node),mid+1,r);
 
     return 0;
 
}
 
int main()
 
{
 
     while(scanf("%d",&t)!=EOF&&t)
 
     {
 
         for(i=0;i<t;i++)
 
         {
 
              scanf("%d%d",&p[i].x,&y[i].y);
 
              y[i].id=i;
 
         }
 
         sort(y,y+t);//对y排序
 
         p[y[0].id].y=1;
 
         for(i=j=1;i<t;i++)
 
         {
 
              if(y[i].y!=y[i-1].y)++j;
 
              p[y[i].id].y=j;
 
         }//对y离散化
 
         ++j;
 
         sort(p,p+t);
 
         p[t].x=-inf;
 
         build(1,0,j);//先正方向查一次，记录了第二三象限的值
 
         update(1,p[0].y,p[0].y);
 
         ans1[0]=0;
 
         ans2[0]=0;
 
         for(i=1;i<t;i++)
 
         {
 
              k=i-1;
 
              t1=t2=0;
 
              while(k>=0&&p[k].x==p[i].x)
 
              {
 
                   if(p[i].y>p[k].y)++t1;
 
                   else if(p[i].y<p[k].y)++t2;
 
                   k--;
 
              }
 
              update(1,p[i].y,p[i].y);
 
              ans1[i]=query(1,0,p[i].y-1)-t1;
 
              ans2[i]=query(1,p[i].y+1,j)-t2;
 
         }
 
         build(1,0,j);//反方向一次，记录一四象限的值
 
         t1=t2=0;
 
         update(1,p[t-1].y,p[t-1].y);
 
         for(i=t-2;i>=0;i--)
 
         {
 
              k=i+1;
 
              t1=t2=0;
 
              while(k<t&&p[k].x==p[i].x)
 
              {
 
                   if(p[i].y>p[k].y)++t1;
 
                   else if(p[i].y<p[k].y)++t2;
 
                   k++;
 
              }
 
              update(1,p[i].y,p[i].y);
 
              ans1[i]+=query(1,p[i].y+1,j)-t2;
 
              ans2[i]+=query(1,0,p[i].y-1)-t1;
 
         }
 
         ans=-inf;
 
         for(i=0;i<t;i++)
 
         {
 
              tt=ans1[i];
 
              j=i+1;
 
              while(p[j].x==p[i].x)
 
              {
 
                   if(tt>ans1[j])tt=ans1[j];
 
                   ++j;
 
              }
 
              if(tt==ans)
 
              {
 
                   tmp=-1;
 
                   for(k=i;k<j;k++)tmp=max(tmp,ans2[k]);
 
                   mm.push_back(tmp);
 
              }
 
              else if(tt>ans)
 
              {
 
                   ans=tt;
 
                   mm.clear();
 
                   tmp=-1;
 
                   for(k=i;k<j;k++)tmp=max(tmp,ans2[k]);
 
                   mm.push_back(tmp);
 
              }
 
              i=j-1;
 
         }
 
         printf("Stan: %d; Ollie:",ans);
 
         sort(mm.begin(),mm.end());
 
         printf(" %d",mm[0]);
 
         tt=mm[0];
 
         for(i=1;i<mm.size();i++)
 
              if(mm[i]!=tt)
 
              {
 
                   printf(" %d",mm[i]);
 
                   tt=mm[i];
 
              }
 
              printf(";\n");
 
              mm.clear();
 
     }
}                         
