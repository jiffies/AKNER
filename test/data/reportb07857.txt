POJ1273 Drainage Ditches - Zsys Algorithm - 博客频道 - CSDN.NET


 Drainage Ditches
 
 
  
   
    
    Time Limit: 1000MS 
      
    Memory Limit: 10000K 
    
    
    Total Submissions: 25097 
      
    Accepted: 9168 
    
   
  
 
Description
 

 Every time it rains on Farmer John's fields, a pond forms over Bessie's favorite clover patch. This means that the clover is covered by water for awhile and takes quite a long time to regrow. Thus, Farmer John has built a set of drainage ditches so that Bessie's clover patch is never covered in water. Instead, the water is drained to a nearby stream. Being an ace engineer, Farmer John has also installed regulators at the beginning of each ditch, so he can control at what rate water flows into that ditch. 
 
Farmer John knows not only how many gallons of water each ditch can transport per minute but also the exact layout of the ditches, which feed out of the pond and into each other and stream in a potentially complex network. 
 
Given all this information, determine the maximum rate at which water can be transported out of the pond and into the stream. For any given ditch, water flows in only one direction, but there might be a way that water can flow in a circle. 
 

 
Input
 

 The input includes several cases. For each case, the first line contains two space-separated integers, N (0 <= N <= 200) and M (2 <= M <= 200). N is the number of ditches that Farmer John has dug. M is the number of intersections points for those ditches. Intersection 1 is the pond. Intersection point M is the stream. Each of the following N lines contains three integers, Si, Ei, and Ci. Si and Ei (1 <= Si, Ei <= M) designate the intersections between which this ditch flows. Water will flow through this ditch from Si to Ei. Ci (0 <= Ci <= 10,000,000) is the maximum rate at which water will flow through the ditch.
 
Output
 

 For each case, output a single integer, the maximum rate at which water may emptied from the pond. 
 
Sample Input
 
5 4
1 2 40
1 4 20
2 4 20
2 3 30
3 4 10
 
Sample Output
 
50 
Source
 

 USACO 93
 

 很单纯的最大流问题，比较简单。
 

 #include<iostream>
using namespace std;
int n,graph[205][205];
int maxflow()
{
    int sum(0);
    for(;;)
    {
        int min(2100000000),queue[2][205],qf=2,qr=1, visited[205];
        queue[0][1]=1, queue[1][1]=0;
        for(int i=1;i<=n;i++)
        {
            visited[i]=0;
        }
        for(;qr<qf;)
        {
            int i;
            for(i=2;i<=n;i++)
            {
                if(not visited[i] and graph[queue[0][qr]][i]>0)
                {
                    queue[0][qf]=i, queue[1][qf++]=qr, visited[i]=1;
                    if(i==n) break;
                }
            }
            qr++;
            if(i==n) break;
        }
        if(queue[0][--qf]!=n) return sum;
        for(int t(qf);t>1;)
        {
            if(graph[queue[0][queue[1][t]]][queue[0][t]]<min and graph[queue[0][queue[1][t]]][queue[0][t]]>0)
            {
                min=graph[queue[0][queue[1][t]]][queue[0][t]];
            }
            t=queue[1][t];
        }
        for(;qf>1;)
        {
            graph[queue[0][queue[1][qf]]][queue[0][qf]]-=min;
            graph[queue[0][qf]][queue[0][queue[1][qf]]]+=min;
            qf=queue[1][qf];
        }
        sum+=min;
    }
}
int main(int argc, char* argv[])
{
    int m;
    while(cin>>m>>n)
    {
        for(int i(1);i<=n;i++)
        {
            for(int j(1);j<=n;j++)
            {
                graph[i][j]=0;
            }
        }
        while(m--)
        {
            int i,j,k;
            cin>>i>>j>>k;
            graph[i][j]+=k;
        }
        cout<<maxflow()<<endl;
    }
    return 0;
}
 
