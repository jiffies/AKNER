poj	eng	B-OJ
 	x	I-OJ
1141	m	I-OJ
(	x	O
Brackets	eng	O
 	x	O
Sequence	eng	O
)	x	O
 	x	O
-	x	O
 	x	O
steamqueen	eng	O
的	uj	O
专栏	n	O
 	x	O
-	x	O
 	x	O
博客	nr	O
频道	n	O
 	x	O
-	x	O
 	x	O
CSDN	eng	O
.	m	O
NET	eng	O

	x	O

	x	O
 	x	O
 	x	O
 	x	O
题目	n	O
：	x	O
http	eng	O
:	x	O
/	x	O
/	x	O
acm	eng	O
.	m	O
pku	eng	O
.	m	O
edu	eng	O
.	m	O
cn	eng	O
/	x	O
JudgeOnline	eng	O
/	x	O
problem	eng	O
?	x	O
id	eng	O
=	x	O
1141	m	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
黑	a	O
书上	s	O
DP	eng	O
第一道	m	O
题	n	O
，	x	O
但	c	O
这	r	O
题	n	O
要	v	O
考虑	v	O
输出	v	O
。	x	O

书上	s	O
分	q	O
了	ul	O
四种	m	O
情况	n	O
考虑	v	O
，	x	O
但	c	O
我	r	O
觉得	v	O
只要	c	O
考虑	v	O
两种	m	O
就行了	l	O
(	x	O
分为	v	O
两个	m	O
合法	n	O
串	v	O
和	c	O
不分	d	O
，	x	O
然后	c	O
设	v	O
一个	m	O
标志	n	O
数组	n	O
pre	eng	O
记录	n	O
分开	v	O
的	uj	O
位置	v	O
)	x	O
，	x	O
这样	r	O
输出	v	O
更	d	O
方便	a	O
。	x	O

第一种	m	O
情况	n	O
s	x	O
[	x	O
i	x	O
]	x	O
=	x	O
'	x	O
(	x	O
'	x	O
&&	x	O
s	eng	O
[	x	O
j	x	O
]	x	O
=	x	O
'	x	O
)	x	O
'	x	O
 	x	O
或者	c	O
s	x	O
[	x	O
i	x	O
]	x	O
=	x	O
'	x	O
[	x	O
'	x	O
&&	x	O
s	eng	O
[	x	O
j	x	O
]	x	O
=	x	O
'	x	O
]	x	O
'	x	O
，	x	O
则	d	O
d	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
j	x	O
]	x	O
=	x	O
d	x	O
[	x	O
i	eng	O
+	x	O
1	m	O
]	x	O
[	x	O
j	x	O
-	x	O
1	x	O
]	x	O
，	x	O
则	d	O
i	eng	O
,	x	O
j	eng	O
处	n	O
不	d	O
需要	v	O
添加	v	O
括号	n	O
,	x	O
做	v	O
一	m	O
标记	n	O
pre	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
j	x	O
]	x	O
=	x	O
-	x	O
1	x	O
即可	d	O
。	x	O

第二种	m	O
情况	n	O
则	d	O
把	p	O
s	eng	O
[	x	O
i	x	O
]	x	O
..	m	O
s	eng	O
[	x	O
j	x	O
]	x	O
分成	v	O
两段	m	O
考虑	v	O
，	x	O
枚举	nz	O
i	x	O
,	x	O
j	x	O
中间	f	O
的	uj	O
点	m	O
k	eng	O
,	x	O
i	x	O
=	x	O
<	x	O
k	x	O
<	x	O
j	x	O
，	x	O
然后	c	O
取	v	O
d	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
j	x	O
]	x	O
=	x	O
min	eng	O
(	x	O
d	x	O
[	x	O
i	x	O
]	x	O
[	x	O
j	x	O
]	x	O
,	x	O
d	x	O
[	x	O
i	x	O
]	x	O
[	x	O
k	x	O
]	x	O
+	x	O
d	eng	O
[	x	O
k	eng	O
+	x	O
1	m	O
]	x	O
[	x	O
j	x	O
]	x	O
)	x	O
，	x	O
再对	d	O
所	u	O
取得	v	O
k	x	O
进行	v	O
标记	n	O
pre	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
j	x	O
]	x	O
=	x	O
k	x	O
。	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
然后	c	O
输出	v	O
也	d	O
主要	b	O
是	v	O
分为	v	O
上面	f	O
两种	m	O
情况	n	O
。	x	O

	x	O
代码	n	O
：	x	O

	x	O
 	x	O

	x	O
#	x	O
include	eng	O
 	x	O
<	x	O
iostream	eng	O
>	x	O

	x	O
#	x	O
include	eng	O
 	x	O
<	x	O
cstdio	eng	O
>	x	O

	x	O
#	x	O
include	eng	O
 	x	O
<	x	O
cstring	eng	O
>	x	O

	x	O
using	eng	O
 	x	O
namespace	eng	O
 	x	O
std	eng	O
;	x	O

	x	O
char	eng	O
 	x	O
str	eng	O
[	x	O
105	m	O
]	x	O
;	x	O

	x	O
int	eng	O
 	x	O
dp	eng	O
[	x	O
101	m	O
]	x	O
[	x	O
101	m	O
]	x	O
;	x	O

	x	O
int	eng	O
 	x	O
pre	eng	O
[	x	O
101	m	O
]	x	O
[	x	O
101	m	O
]	x	O
;	x	O

	x	O
void	eng	O
 	x	O
print	eng	O
(	x	O
int	eng	O
 	x	O
i	x	O
,	x	O
int	eng	O
 	x	O
j	x	O
)	x	O

	x	O
{	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
if	eng	O
 	x	O
(	x	O
i	x	O
>	x	O
j	x	O
)	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
return	eng	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
if	eng	O
 	x	O
(	x	O
i	x	O
=	x	O
=	x	O
j	x	O
)	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
{	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
if	eng	O
 	x	O
(	x	O
str	eng	O
[	x	O
i	x	O
]	x	O
=	x	O
=	x	O
'	x	O
(	x	O
'	x	O
|	x	O
|	x	O
str	eng	O
[	x	O
j	x	O
]	x	O
=	x	O
=	x	O
'	x	O
)	x	O
'	x	O
)	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
{	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
printf	eng	O
(	x	O
"	x	O
(	x	O
)	x	O
"	x	O
)	x	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
}	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
else	eng	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
{	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
printf	eng	O
(	x	O
"	x	O
[	x	O
]	x	O
"	x	O
)	x	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
}	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
return	eng	O
 	x	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
}	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
if	eng	O
 	x	O
(	x	O
pre	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
j	x	O
]	x	O
=	x	O
=	x	O
-	x	O
1	x	O
)	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
{	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
printf	eng	O
(	x	O
"	x	O
%	x	O
c	x	O
"	x	O
,	x	O
str	eng	O
[	x	O
i	x	O
]	x	O
)	x	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
print	eng	O
(	x	O
i	eng	O
+	x	O
1	m	O
,	x	O
j	x	O
-	x	O
1	x	O
)	x	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
printf	eng	O
(	x	O
"	x	O
%	x	O
c	x	O
"	x	O
,	x	O
str	eng	O
[	x	O
j	x	O
]	x	O
)	x	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
}	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
else	eng	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
{	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
print	eng	O
(	x	O
i	x	O
,	x	O
pre	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
j	x	O
]	x	O
)	x	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
print	eng	O
(	x	O
pre	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
j	x	O
]	x	O
+	x	O
1	m	O
,	x	O
j	x	O
)	x	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
}	x	O

	x	O
}	x	O

	x	O
int	eng	O
 	x	O
main	eng	O
(	x	O
)	x	O

	x	O
{	x	O
 	x	O
 	x	O
 	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
int	eng	O
 	x	O
i	x	O
,	x	O
j	x	O
,	x	O
p	x	O
,	x	O
k	x	O
,	x	O
len	eng	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
while	eng	O
 	x	O
(	x	O
gets	eng	O
(	x	O
str	eng	O
)	x	O
)	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
{	x	O
 	x	O
 	x	O
 	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
len	eng	O
=	x	O
strlen	eng	O
(	x	O
str	eng	O
)	x	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
for	eng	O
 	x	O
(	x	O
i	x	O
=	x	O
0	x	O
;	x	O
i	x	O
<	x	O
len	eng	O
;	x	O
i	eng	O
++	x	O
)	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
dp	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
i	x	O
]	x	O
=	x	O
1	x	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
for	eng	O
 	x	O
(	x	O
p	x	O
=	x	O
1	x	O
;	x	O
p	x	O
<	x	O
len	eng	O
;	x	O
p	eng	O
++	x	O
)	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
{	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
for	eng	O
 	x	O
(	x	O
i	x	O
=	x	O
0	x	O
;	x	O
i	eng	O
+	x	O
p	eng	O
<	x	O
len	eng	O
;	x	O
i	eng	O
++	x	O
)	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
{	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
int	eng	O
 	x	O
j	x	O
=	x	O
i	eng	O
+	x	O
p	eng	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
dp	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
j	x	O
]	x	O
=	x	O
9999999	m	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
if	eng	O
 	x	O
(	x	O
(	x	O
str	eng	O
[	x	O
i	x	O
]	x	O
=	x	O
=	x	O
'	x	O
(	x	O
'	x	O
&&	x	O
str	eng	O
[	x	O
j	x	O
]	x	O
=	x	O
=	x	O
'	x	O
)	x	O
'	x	O
)	x	O
|	x	O
|	x	O
(	x	O
str	eng	O
[	x	O
i	x	O
]	x	O
=	x	O
=	x	O
'	x	O
[	x	O
'	x	O
&&	x	O
str	eng	O
[	x	O
j	x	O
]	x	O
=	x	O
=	x	O
'	x	O
]	x	O
'	x	O
)	x	O
)	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
{	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
dp	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
j	x	O
]	x	O
=	x	O
dp	eng	O
[	x	O
i	eng	O
+	x	O
1	m	O
]	x	O
[	x	O
j	x	O
-	x	O
1	x	O
]	x	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
}	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
pre	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
j	x	O
]	x	O
=	x	O
-	x	O
1	x	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
for	eng	O
 	x	O
(	x	O
k	x	O
=	x	O
i	x	O
;	x	O
k	x	O
<	x	O
j	x	O
;	x	O
k	eng	O
++	x	O
)	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
{	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
if	eng	O
 	x	O
(	x	O
dp	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
j	x	O
]	x	O
>	x	O
dp	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
k	x	O
]	x	O
+	x	O
dp	eng	O
[	x	O
k	eng	O
+	x	O
1	m	O
]	x	O
[	x	O
j	x	O
]	x	O
)	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
{	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
dp	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
j	x	O
]	x	O
=	x	O
dp	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
k	x	O
]	x	O
+	x	O
dp	eng	O
[	x	O
k	eng	O
+	x	O
1	m	O
]	x	O
[	x	O
j	x	O
]	x	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
pre	eng	O
[	x	O
i	x	O
]	x	O
[	x	O
j	x	O
]	x	O
=	x	O
k	x	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
}	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
}	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
}	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
}	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
print	eng	O
(	x	O
0	x	O
,	x	O
len	eng	O
-	x	O
1	x	O
)	x	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
 	x	O
printf	eng	O
(	x	O
"	x	O
\	x	O
n	x	O
"	x	O
)	x	O
;	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
}	x	O

	x	O
 	x	O
 	x	O
 	x	O
 	x	O
return	eng	O
 	x	O
0	x	O
;	x	O

	x	O
}	x	O

	x	O

	x	O