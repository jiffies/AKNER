pku1178解题报告_....._百度空间

http://162.105.81.212/JudgeOnline/problem?id=1178
题意：一个棋盘（8*8），一个王，还有n个马（n不确定），马有马的走法，王有王的走法，还有当王和马走到一个格子上时，马可以带着王走，输入一串字符，字母代表x坐标，数字代表y坐标，问最少经过多少步可以使棋盘上的棋子都到达同一个格子？
分析：先按照马走的线路建图，然后用floyd算出每两个点之间的最小步数，接着就是枚举，第一步枚举可能的汇聚点，第二步枚举一个马带走王的点，最后就是枚举每个马的位置，计算出最小的步数。
代码及部分注释：
#include<stdio.h>
#include<string.h>
#include<math.h>
#define MAX 70
#define INF 1<<29
int sx,sy;
int dx[MAX],dy[MAX];
char ch[MAX*2];
int cnt;
int ix[]={1,1,-1,-1,2,2,-2,-2};
int iy[]={2,-2,2,-2,1,-1,1,-1};
int dis[MAX][MAX];
int max(int a,int b)
{
    if(a>b)return a;
    else return b;
}
bool check(int x,int y)
{
    return (x>=0&&y>=0&&x<8&&y<8);
}
void init()//建图 以马走的路线建图 
{
    int i,j,k,x,y;
   // memset(dis,0,sizeof(dis));
   for(i=0;i<64;i++)
   for(j=0;j<64;j++)
    dis[i][j]=INF;
    for(i=0;i<8;i++)
    for(j=0;j<8;j++)
    for(k=0;k<8;k++)
    {
       x=ix[k]+i;
       y=iy[k]+j;
       if(!check(x,y))continue; 
       dis[i*8+j][x*8+y]=dis[x*8+y][i*8+j]=1;
    }
}
void floyd()
{ 
    int i,j,k;
    for(k=0;k<64;k++)
    for(i=0;i<64;i++)
    for(j=0;j<64;j++)
    {
      if(dis[i][j]>dis[i][k]+dis[k][j])
      dis[i][j]=dis[i][k]+dis[k][j]; 
    } 
for(i=0;i<64;i++)
   dis[i][i]=0;
}
void fun()
{
    int i,j,c,k,tmp,ans=INF,min;
    for(i=0;i<64;i++)//枚举可能的汇集点 
    for(j=0;j<64;j++)//枚举可能的带走王的位置 
    {
       tmp=max(abs(j%8-sx),abs(j/8-sy));//王走的步数 
       min=INF;
    for(c=0;c<cnt;c++)
    {
        k=dx[c]+dy[c]*8;
        tmp+=dis[i][k];//每个马到汇集点的距离 
        if(dis[i][j]+dis[k][j]-dis[i][k]<min)
        min=dis[i][j]+dis[k][j]-dis[i][k];//选择最少的带走王的马 
    }
    tmp+=min;
    if(ans>tmp)ans=tmp; 
    } 
    if(ans==INF)ans=0;
    printf("%d\n",ans);
}
int main()
{
    int i;
    while(scanf("%s",ch)!=EOF)
    {
        sx=ch[0]-'A';
        sy=ch[1]-'1';
        cnt=0;
        for(i=2;i<strlen(ch);i+=2)
        {
          dx[cnt]=ch[i]-'A';
          dy[cnt++]=ch[i+1]-'1'; 
        }
        init();
        floyd();
        fun();
    }
}
/*
Sample Input
D4A3A8H1H8
Sample Output
10
A1A2A3H2H5H6H7H8C1C2C5C6C7E2E3E4E5E6E7E8
42
*/
