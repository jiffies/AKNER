poj 3533  Nim积_年轻_百度空间

(i) The nim-product of a Fermat 2-power and any smaller number is their ordinary product.
(ii) The nim-product of a Fermat 2-power with itself is the Fermat 2-power times 3/2 in the ordinary sense.

竟然又因为位运算的优先级问题找了好久，因该是 if((i&1) == 0) 而不是 if(i&1 == 0)， 鄙视自己~~晚饭都耽误了~~
#include<iostream>
#include<cstring>

#include<cstdio>

using namespace std;

const int N = 1001;

int sg[N];

int gg[N][N];

bool flag[N];

int mex(int k)

{

   memset(flag,false,sizeof(flag));

   for(int i = 1; i < k; i++)

   {

      if(sg[i])flag[sg[i]] = true;

   }

   for(int i = 1; i < N; i++)

   {

      if(!flag[i])return i;

   }

}

int f(int,int);//声明一下，因为f与g互相嵌套调用

int g(int x, int y)//计算2^x与2^y的nim积

{

   if(gg[x][y] != -1)//查备忘录

   {

      return gg[x][y];

   }

   if(!x)//x==0也就是1与2^y的nim积，等于2^y

   {

      return gg[x][y] = 1<<y;

   }

   if(!y)//同上

   {

      return gg[x][y] = 1<<x;

   }

   int ans=1,k=1,t;

   int x1=x,y1=y;

   while(x||y)//再将x和y分为二进制，这里计算那些普通乘积的（即对应二进制位不同的）

   {

      t = 1<<k;//从此位得到的最终的数2^k

      if((x&1||y&1) && !((x&1)&&(y&1)))//该位不同

      {

         ans *= t;

      }

      x >>= 1;

      y >>= 1;

      k <<= 1;//从此位得到的指数(本身也是2的幂)

   }

   k = 1;

   x = x1;

   y = y1;

   while(x||y)//计算那些相同的fermat 2-power 数，与已得出的数的nim积

   {

      t = 1<<k;

      if((x&1)&&(y&1))//该位相同

      {

         ans = f(ans,t/2*3);

      }

      x >>= 1;

      y >>= 1;

      k <<= 1;//从此位得到的指数(本身也是2的幂)

   }

   return (gg[x1][y1] = ans);

}

int f(int x, int y)//计算二维的nim积

{

   if(!x || !y)return 0;

   if(x == 1)return y;

   if(y == 1)return x;

   int ans = 0;

   for(int i = x,a = 0; i; i>>=1,a++)//完成（将x和y分解后）按分配律计算其积

   {

      if((i&1)==0)continue;//该位（bit）是1才计算，否则跳过

      for(int j = y,b = 0; j; j>>=1,b++)

      {

         if((j&1)==0)continue;

         ans ^= g(a,b);

      }

   }

   return ans;

}

int main()

{

   int x,y,z;

   int n,ans;

   memset(gg,-1,sizeof(gg));

   for(int i = 0; i < N; i++)//先计算出一维的sg值

   {

      sg[i] = mex(i);

   }

   while(scanf("%d",&n) != EOF)

   {

      ans = 0;

      while(n--)

      {

         scanf("%d%d%d",&x,&y,&z);

         ans ^= f(sg[x],f(sg[y],sg[z]));

      }

      puts(ans ? "No" : "Yes");

   }

   return 0;

}

