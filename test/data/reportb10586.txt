POJ 3176 Cow Bowling - c++语言程序开发技术文章_c++编程 - 红黑联盟

Cow Bowling 

 Time Limit: 1000MS
   
  Memory Limit: 65536K
 

 Total Submissions: 11302
   
  Accepted: 7399
 

 Description  www.2cto.com
 

  
 

 The cows don't use actual bowling balls when they go bowling. They each take a number (in the range 0..99), though, and line up in a standard bowling-pin-like triangle like this: 
 

  
 

           7
 

  
 

  
 

  
 

         3   8
 

  
 

  
 

  
 

       8   1   0
 

  
 

  
 

  
 

     2   7   4   4
 

  
 

  
 

  
 

   4   5   2   6   5
 

 Then the other cows traverse the triangle starting from its tip and moving "down" to one of the two diagonally adjacent cows until the "bottom" row is reached. The cow's score is the sum of the numbers of the cows visited along the way. The cow with the highest score wins that frame. 
 

  
 

 Given a triangle with N (1 <= N <= 350) rows, determine the highest possible sum achievable.
 

 Input
 

  
 

 Line 1: A single integer, N 
 

  
 

 Lines 2..N+1: Line i+1 contains i space-separated integers that represent row i of the triangle.
 

 Output
 

  
 

 Line 1: The largest sum achievable using the traversal rules
 

 Sample Input
 

  
 

 5
 

 7
 

 3 8
 

 8 1 0
 

 2 7 4 4
 

 4 5 2 6 5
 

 Sample Output
 

  
 

 30
 

 Hint
 

  
 

 Explanation of the sample: 
 

  
 

           7
 

  
 

          *
 

  
 

         3   8
 

  
 

        *
 

  
 

       8   1   0
 

  
 

        *
 

  
 

     2   7   4   4
 

  
 

        *
 

  
 

   4   5   2   6   5
 

 The highest score is achievable by traversing the cows as shown above.
 

 Source
 

  
 

 USACO 2005 December Bronze
 

 考察点：DP 问题
 

 [cpp] 
 

 #include <stdio.h>  
 

 #include <string.h>  
 

 #include <math.h>  
 

 int a[400][400];  
 

 int dp[400][400];  
 

 int main()  
 

 {  
 

     int i,j,n,m,s,t;  
 

     scanf("%d",&n);  
 

     for(i=0;i<=n-1;i++)  
 

     {  
 

         for(j=0;j<=i;j++)  
 

         {  
 

             scanf("%d",&a[i][j]);  
 

         }  
 

     }  
 

     memset(dp,0,sizeof(dp));  
 

     for(i=0;i<=n-1;i++)  
 

     {    www.2cto.com
 

         dp[n-1][i]=a[n-1][i];  
 

     }  
 

     for(i=n-2;i>=0;i--)  
 

     {  
 

         for(j=0;j<=i;j++)  
 

         {  
 

             if(dp[i+1][j]>dp[i+1][j+1])  
 

             {  
 

                 dp[i][j]=dp[i+1][j]+a[i][j];  
 

             }else  
 

             {  
 

                 dp[i][j]=dp[i+1][j+1]+a[i][j];  
 

             }  
 

         }  
 

     }  
 

     printf("%d\n",dp[0][0]);  
 

     return 0;  
 

 }  
 

  
