poj4047  garden_心自天涯_新浪博客

每个节点记录从它开始的k个数之和，然后收集其中的最大值，使用懒惰标记法。注意细节，写好pushup和pushdown。
#include <iostream>
 #include <cstdio>
 #include <cstring>
 #include <algorithm>
 using namespace std;
#define LS (rt<<1)
 #define RS (rt<<1|1)
 int fa[200005],tem[200005];
 int MAX[600010],lz[600010];
 int kk;
void pushup(int l,int r,int rt)
 {
     MAX[rt] = max(MAX[LS],MAX[RS]);
 }
void pushdown(int l,int r,int rt)
 {
     if(l==r) return;
     lz[LS] += lz[rt];
     lz[RS] += lz[rt];
     MAX[RS] += lz[rt];
     MAX[LS] += lz[rt];
     lz[rt] = 0;
 }
void maketree(int l,int r,int rt)
 {
     lz[rt] = 0;
     if(l==r){
         MAX[rt] = tem[kk++];
         return;
     }
     int m=(l+r)>>1;
     maketree(l,m,LS);
     maketree(m+1,r,RS);
     pushup(l,r,rt);
 }
void update(int s,int t,int sc,int l,int r,int rt)
 {
     int m=(l+r)>>1;
     if(l==r){
         MAX[rt] += sc;
         return;
     }
     if(lz[rt])  pushdown(l,r,rt);
     if(s<=l && t>=r){
         MAX[rt] += sc;
         lz[rt] += sc;
         return;
     }
     if(s<=m){
         update(s,t,sc,l,m,LS);
     }
     if(t>m){
         update(s,t,sc,m+1,r,RS);
     }
     pushup(l,r,rt);
 }
int query(int s,int t,int l,int r,int rt)
 {
     int m=(l+r)>>1;
     if(lz[rt])  pushdown(l,r,rt);
     int ret = -200000000;
     if(s<=l && t>=r) return MAX[rt];
     if(s<=m) ret = max(ret,query(s,t,l,m,LS));
     if(t>m) ret = max(ret,query(s,t,m+1,r,RS));
     return ret;
 }
 int main()
 {
     int num,n,m,k,x,y,tmp,p;
     scanf("%d",&num);
     while(num--){
         kk=1;
         memset(lz,0,sizeof(lz));
         memset(MAX,0,sizeof(MAX));
         tem[1] = 0;
         scanf("%d%d%d",&n,&m,&k);
         for(int i=1; i<=n; i++) scanf("%d",fa+i);
         for(int i=1; i<=k; i++){
             tem[1] += fa[i];
         }
         for(int i=2; i<=n-k+1; i++){
             tem[i] = tem[i-1] +fa[i+k-1] - fa[i-1];
         }
         maketree(1,n-k+1,1);
         while(m--){
             scanf("%d%d%d",&p,&x,&y);
             if(p==2){
                 printf("%d\n",query(x,y-k+1,1,n-k+1,1));
             }
             else if(p==0){
                 if(x<k){
                     update(1,x,y-fa[x],1,n-k+1,1);
                 }
                 else if(x>n-k+1){
                     update(x-k+1,n-k+1,y-fa[x],1,n-k+1,1);
                 }
                 else{
                     update(x-k+1,x,y-fa[x],1,n-k+1,1);
                 }
                 fa[x] = y;
             }
             else if(p==1){
                 if(x<k){
                     update(1,x,fa[y]-fa[x],1,n-k+1,1);
                 }
                 else if(x>n-k+1){
                     update(x-k+1,n-k+1,fa[y]-fa[x],1,n-k+1,1);
                 }
                 else{
                     update(x-k+1,x,fa[y]-fa[x],1,n-k+1,1);
                 }
                 if(y<k){
                     update(1,y,fa[x]-fa[y],1,n-k+1,1);
                 }
                 else if(y>n-k+1){
                     update(y-k+1,n-k+1,fa[x]-fa[y],1,n-k+1,1);
                 }
                 else{
                     update(y-k+1,y,fa[x]-fa[y],1,n-k+1,1);
                 }
                 tmp = fa[x];
                 fa[x] = fa[y];
                 fa[y] = tmp;
             }
         }
     }
     return 0;
 }
