数据结构与算法学习之十一【树状数组】(2)HOJ 2430 + HOJ 2098/POJ 2299_漫步在橙色夕阳下的路_新浪博客

 
  HOJ 2430 Counting the algorithms  
 

传送门：http://acm.hit.edu.cn/hoj/problem/view?id=2430
题意：给出2N个数，1 - N出现两次，每次去掉1个数字，得分为这个数字两次出现的距离，比如3第一次出现在86位，第二次出现在88位，可以得2分，给出能得的最大分。
输入：2N个数。
输出：最大分。
思路：从左到右扫描或者从右到左扫描，将外层的数字先删除，再删除内层的数字即可。需要记录每个数字第一次出现和第二次出现的位置。初始化的时候，将每个点设置为1，这样查询的时候就是就是两者的距离，当数字被删除之后，将这两个点减1，变成0，这样不影响其他数字的计算。
程序：
 

 #include<cstdio>
 #include<cstring>
 const int MAX = 102400;
 class TreeArray {
 private:
     int N, c[MAX * 2];
     int lowbit(int x) { return x & (-x); }
     int sum(int x) {
         int ret = 0;
         for (int i = x; i > 0; i -= lowbit(i)) {
             ret += c[i];
         }
         return ret;
     }
 public:
     void init(int n) {
         N = n;
         memset(c, 0, sizeof(c));
     }
     void update(int x, int v) {
         for (int i = x; i <= N; i += lowbit(i)) {
             c[i] += v;
         }
     }
     int query(int s, int e) { return sum(e) - sum(s); }
 };
 TreeArray ta;
 int main() {
     int n, first[MAX], second[MAX], arr[MAX * 2];
     while (scanf("%d", &n) == 1) {
         n *= 2;
         ta.init(n);
         memset(first, 0, sizeof(first));
         for (int i = 1; i <= n; i++) {
             scanf("%d", &arr[i]);
             if (first[arr[i]]) {
                 second[arr[i]] = i;
             } else {
                 first[arr[i]] = i;
             }
             ta.update(i, 1);
         }
         int ans = 0;
         for (int i = n; i > 0; i--) {
             if (!first[arr[i]]) {
                 continue;
             }
             ans += ta.query(first[arr[i]], second[arr[i]]);
             ta.update(first[arr[i]], -1);
             ta.update(second[arr[i]], -1);
             first[arr[i]] = 0;
         }
         printf("%d\n",ans);
     }
     return 0;
 }
 
 
  HOJ 2098/POJ 2299 Ultra-QuickSort（树状数组+离散化+HOJ坑爹）  
 

传送门：http://acm.hit.edu.cn/hoj/problem/view?id=2098
http://poj.org/problem?id=2299
题意：就是相邻的两个如果是逆序的话需要交换，直到最后都有序，问需要交换多少次？
输入：初始序列。
输出：需要交换的次数。
思路：不知道HOJ上的编译器有问题还是怎么样，用long long存结果就是过不了，改用double过了！！！但是这道题还是很有代表性的。首先数个数上限为500000，但是数据范围非常大，远远超出了这个范围，需要用到离散化，说白了就是把这n个数映射到1 – n上，来表示他们的相对大小，比如1000，1，100，10这样在存储的时候就可以变为4，1，3，2，大大降低了需要的空间。然后就是从左到右扫描4,1,3,2，累加每次出现的时候已经有多少个比它大的数组出现了，可以通过当前个数 – 树状数组统计的比它小或者等于它的个数来算出。
程序：
 

 #include <cstdio>
 #include <cstring>
 #include <algorithm>
 using namespace std;
 const int MAX = 512000;
 class TreeArray {
 private:
     int N;
     long long c[MAX];
     int lowbit(int x) {
         return x & (-x);
     }
 public:
     void init(int n) {
         N = n;
         memset(c, 0, sizeof(c));
     }
     void update(int x, int v) {
         for (int i = x; i <= N; i += lowbit(i)) {
             c[i] += v;
         }
     }
     long long sum(int x) {
         long long ret = 0;
         for (int i = x; i > 0; i -= lowbit(i)) {
             ret += c[i];
         }
         return ret;
     }
 };
 class Array {
 public:
     long long value;
     int id;
     bool operator<(const Array& a) const { return value < a.value; }
 };
 TreeArray ta;
 Array arr[MAX];
 int a[MAX];
 int main() {
     int n;
     while (scanf("%d", &n) == 1 && n) {
         ta.init(n);
         for (int i = 1; i <= n; i++) {
             scanf("%I64d", &arr[i].value);
             arr[i].id = i;
         }
         stable_sort(arr + 1, arr + 1 + n);
         a[arr[1].id] = 1;
         for (int i = 2; i <= n; i++) {
             if (arr[i].value == arr[i - 1].value) {
                 a[arr[i].id] = a[arr[i - 1].id];
             } else {
                 a[arr[i].id] = i;
             }
         }
         double ans = 0;
         for (int i = 1; i <= n; i++) {
             ta.update(a[i], 1);
             ans += i - ta.sum(a[i]);
         }
         printf("%.0lf\n", ans);
     }
     return 0;
 }
