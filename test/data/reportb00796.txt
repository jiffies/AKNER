字典树模版(T9 PKU 1451)_piratehome_百度空间

字典树模版(T9 PKU 1451)
#include "stdio.h"
#include "iostream"
using namespace std;
int dir[10][4]={-1,-1,-1,-1,
                -1,-1,-1,-1,
                0,1,2,-1,
                3,4,5,-1,
                6,7,8,-1,
                9,10,11,-1,
                12,13,14,-1,
                15,16,17,18,
                19,20,21,-1,
                22,23,24,25};
int nowp;
int maxsum;
char strp[150];
typedef struct Node
{
    Node* letter[26];
    int frq[26];
}*DicTree,Node;
DicTree NewTree()
{
    DicTree DicT;
    DicT=new Node;
    memset(DicT->letter,NULL,sizeof(DicT->letter));
    memset(DicT->frq,0,sizeof(DicT->frq));
    return DicT;
}
void BuiltTree(DicTree &DicT)
{
    DicT=NewTree();
}
DicTree InsetLetter(DicTree &DicT,char les, int frqu)
{
    if(DicT->letter[les-'a']==NULL)
        DicT->letter[les-'a']=NewTree();
    DicT->frq[les-'a']+=frqu;
    return DicT->letter[les-'a'];
}
void InsetString(DicTree &DicT,char str[], int frqu)
{
    int i;
    DicTree TempTree=DicT;
    for(i=0; str[i]!='\0'; i++)
        TempTree=InsetLetter(TempTree,str[i],frqu);
}
void DelTree(DicTree &DicT)
{
    if(DicT==NULL)
        return ;
    for(int i=0; i<26; i++)
        DelTree(DicT->letter[i]);
    delete DicT;
    return;
}
bool FindWords(DicTree &DicT, char instr[], char outstr[],int p, int mx)
{
    if(p==nowp)
    {
        if(mx>maxsum)
        {
            maxsum=mx;
            for(int i=0; i<p; i++)
                strp[i]=outstr[i];
        }
        return true;
    }
    int t=instr[p]-'0';
    int i;
    bool have=false;
    for(i=0; i<4; i++)
        if(dir[t][i]!=-1&& DicT->frq[dir[t][i]]!=0)
        {
                outstr[p]='a'+dir[t][i];
                have|=FindWords(DicT->letter[dir[t][i]],instr,outstr,p+1,DicT->frq[dir[t][i]]);
        }
    return have;
}
int main()
{
    int cas, n,fq, i, len,j,time=0, k;
    DicTree DicT;
    char instr[150],outstr[150],str[150];
    bool have;
    scanf("%d",&cas);
    while(cas--)
    {
        time++;
        printf("Scenario #%d:\n",time);
        BuiltTree(DicT);
        scanf("%d",&n);
        for(i=0; i<n; i++)
        {
            scanf("%s %d",str,&fq);
            InsetString(DicT,str,fq);
        }
        scanf("%d",&n);
        for(i=0; i<n; i++)
        {
            scanf("%s",instr);
            nowp=0; have=true;
            len=strlen(instr);
            for(j=0; j<len-1; j++)
            {
                if(have)
                {
                    nowp=j+1;
                    maxsum=0;
                    have=FindWords(DicT,instr,outstr,0,0);
                }
                if(have)
                {
                    for(k=0;k<=j;k++)
                        printf("%c",strp[k]);
                    printf("\n");
                }
                else
                    printf("MANUALLY\n");
            }
            printf("\n");
        }
        printf("\n");
        DelTree(DicT);
    }
    return 0;
}
