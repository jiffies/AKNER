pku 3140_chenjiang_百度空间

题意：有一棵树，数的每个节点有一个权值，删去树中的一条边，得到两部分，求这两部分权值和的差最少是多少
思路：树形DP，递归建树并求出树中每个节点root所属子树的权值和，然后求每个节点删除他和孩子节点后分成的两部分的权值差，求的最小那个就行了
const double PI = acos(-1.0);
const double eps = 1e-11;
#define _max 100005
int head[_max];
int head0[_max];
struct node
{
    int to;
    int next;
}edge[_max*20],edge0[_max];
int e_num0;
int e_num;
int n,m;
__int64 sum[_max];
int a[_max];
__int64 num;
__int64 ans;
bool visited[_max];
__int64 labs(__int64 k)
{
    if(k>=0)return k;
    else return -k;
}
void add(int from,int to)
{
    e_num++;
    int i=e_num;
    edge[i].to=to;
    edge[i].next=head[from];
    head[from]=i;
}
void add0(int from,int to)
{
    e_num0++;
    int i=e_num0;
    edge0[i].to=to;
    edge0[i].next=head0[from];
    head0[from]=i;
}
void Build_Tree(int root)
{
    int i;
    for(i=head[root];i!=-1;i=edge[i].next)
    {
        int son=edge[i].to;
        if(visited[son])continue;
        visited[son]=1;
        add0(root,son);
        Build_Tree(son);
        sum[root]+=sum[son];
    }
}
void dfs(int root)
{
    int i;
    for(i=head0[root];i!=-1;i=edge0[i].next)
    {
        int son=edge0[i].to;
        ans=min(ans,labs(num-sum[son]-sum[son]));
        dfs(son);
    }
}
int main(int argc, char** argv) {
    int i,j;
    int ca=0;
    while(scanf("%d%d",&n,&m)!=EOF)
    {
        if(n==0&&m==0)break;
        num=0;
        for(i=1;i<=n;i++)
        {
            scanf("%d",&a[i]);
            num+=a[i];
            sum[i]=a[i];
        }
        e_num=0;
        memset(head,-1,sizeof(head));
        for(i=1;i<=m;i++)
        {
            int from,to;
            scanf("%d%d",&from,&to);
            add(from,to);
            add(to,from);
        }
        if(n==1)
        {
            printf("Case %d: %d\n",++ca,a[1]);
            continue;
        }
        memset(visited,0,sizeof(visited));
        visited[1]=1;
        memset(head0,-1,sizeof(head0));
        e_num0=0;
        Build_Tree(1);
        ans=(long long) INT_MAX * (long long) 10000;
        dfs(1);
        printf("Case %d: %I64d\n",++ca,ans);
    }
    return (EXIT_SUCCESS);
}
