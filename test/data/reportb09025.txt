Poj1164_Abalone_新浪博客

我的思路是广度优先搜索算法 BFS 

 

 

 WA了好几次，原来没有考虑到重复进队的情况，哎，好久不写程序了，悲剧啊
 

 就是这种情况啊
 

 3 3
 

 3 2 6
 

 1 0 4
 

 9 8 12
 

 那个0会重复进队啊，呵呵
 

 

 

 没什么好说的，一道水题目，上代码了
 

 

 

 ******************************************************
 
 
 
  #include<iostream>
  
 
  #include<queue>
  
 
  

  
 
  using namespace std;
  
 
  

  
 
  const int dir[4] = { 8, 4, 2, 1};
  
 
  const int move[4][2] = { {1, 0}, {0, 1}, {-1, 0}, {0, -1} };
  
 
  

  
 
  struct Node{
  
 
   
   
    
  int x;
  
 
   
   
    
  int y;
  
 
   
   
    
  int wallSum;
  
 
   
   
    
  Node(int x, int y, int wallSum){
  
 
   
   
    
    
    
  this->x = x;
  
 
   
   
    
    
    
  this->y = y;
  
 
   
   
    
    
    
  this->wallSum = wallSum;
  
 
   
   
    
  }
  
 
  };
  
 
  

  
 
  class Castle{
  
 
   
  public:
  
 
   
   
    
  Castle() {}
  
 
   
   
    
  void calculate();
  
 
   
  private:
  
 
   
   
    
  void BFS();
  
 
   
   
    
  void initial();
  
 
   
   
    
  int R;
  
 
   
   
    
  int C;
  
 
   
   
    
  int maxRoom;
  
 
   
   
    
  int roomNum;
  
 
   
   
    
  int map[50][50];
  
 
  };
  
 
  

  
 
  void Castle::calculate(){
  
 
   
   
    
  this->initial();
  
 
   
   
    
  this->BFS();
  
 
   
   
    
  cout<<roomNum<<endl;
  
 
   
   
    
  cout<<maxRoom<<endl;
  
 
  }
  
 
  

  
 
  void Castle::BFS(){
  
 
   
   
    
  for (int i=0; i<R; i++)
  
 
   
   
    
    
    
  for (int j=0; j<C; j++)
  
 
   
   
    
    
    
    
    
  if (map[i][j] < 16){
  
 
   
   
    
    
    
    
    
    
    
  roomNum++;
  
 
   
   
    
    
    
    
    
    
    
  int capacity = 0;
  
 
   
   
    
    
    
    
    
    
    
  queue<Node*> roomQueue;
  
 
   
   
    
    
    
    
    
    
    
  Node* np = new Node(i, j, map[i][j]);
  
 
   
   
    
    
    
    
    
    
    
  map[i][j] = 16;
  
 
   
   
    
    
    
    
    
    
    
  roomQueue.push(np);
  
 
   
   
    
    
    
    
    
    
    
  while (!roomQueue.empty()){
  
 
   
   
    
    
    
    
    
    
    
    
    
  Node* npre = roomQueue.front();
  
 
   
   
    
    
    
    
    
    
    
    
    
  roomQueue.pop();
  
 
   
   
    
    
    
    
    
    
    
    
    
  capacity++;
  
 
   
   
    
    
    
    
    
    
    
    
    
  int sum = npre->wallSum;
  
 
   
   
    
    
    
    
    
    
    
    
    
  for (int n=0; n<4; n++){
  
 
   
   
    
    
    
    
    
    
    
    
    
    
    
  if (sum/dir[n]==0 && map[npre->x+move[n][0]][npre->y+move[n][1]]<16){
  
 
   
   
    
    
    
    
    
    
    
    
    
    
    
    
    
  int x = npre->x+move[n][0];
  
 
   
   
    
    
    
    
    
    
    
    
    
    
    
    
    
  int y = npre->y+move[n][1];
  
 
   
   
    
    
    
    
    
    
    
    
    
    
    
    
    
  np = new Node(x, y, map[x][y]);
  
 
   
   
    
    
    
    
    
    
    
    
    
    
    
    
    
  map[x][y] = 16;
  
 
   
   
    
    
    
    
    
    
    
    
    
    
    
    
    
  roomQueue.push(np);
  
 
   
   
    
    
    
    
    
    
    
    
    
    
    
  }
  
 
   
   
    
    
    
    
    
    
    
    
    
    
    
  sum %= dir[n];
  
 
   
   
    
    
    
    
    
    
    
    
    
  }
  
 
   
   
    
    
    
    
    
    
    
  }
  
 
   
   
    
    
    
    
    
    
    
  maxRoom = maxRoom > capacity ? maxRoom : capacity;
  
 
   
   
    
    
    
    
    
  }
  
 
  }
  
 
  

  
 
  void Castle::initial(){
  
 
   
   
    
  maxRoom = 0;
  
 
   
   
    
  roomNum = 0;
  
 
   
   
    
  cin>>R>>C;
  
 
   
   
    
  for (int i=0; i<R; i++)
  
 
   
   
    
    
    
  for (int j=0; j<C; j++)
  
 
   
   
    
    
    
    
    
  cin>>map[i][j];
  
 
  }
  
 
  

  
 
  int main(){
  
 
   
   
    
  Castle castle;
  
 
   
   
    
  castle.calculate();
  
 
   
   
    
  return 0;
  
 
  }
  
 

 

