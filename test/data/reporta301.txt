POJ 1324_勇敢的心_新浪博客

POJ 1324
 BFS广搜，所有边权都相等的这类广搜是不需要记录dis[][]数组的，定义一个vis[][]数组，碰到了这个点就标记这个点访问过，这样一旦第一次碰到了一个没有访问过的点并且这个点是终点的话，那么就可以返回结果了。
 这个题的重点在于如何记录蛇身的状态，注意到蛇身长度最长为8，那么只需要7个记录蛇身相邻的块的关系就可以了，比如如果一个蛇块A在另一个蛇块B的右边，认为这个值为1，这样只需要四个值就可以记录相邻的两个蛇块之间的关系了
 小技巧，如果多CASE输入的话，初始化vis操作可能会占用比较多的时间，我们可以将vis[][]==cas这个条件来判断是否是本CASE中所访问的点。
 另外需要注意的地方，对于队列来说，如果要在访问到新的节点是判断是否是终点，那么一定记得在最开始的时候判断是否起点就是终点，不然可能会返回无解，比如起点和终点重合，然后起点四周被封死，这样如果不在一开始判断的话，会导致最终返回-1，这是错误的。如果是在一个节点弹出队列的时候判断是否是终点，那么就不需要在最开始的时候判断了。
#include<iostream>
 #include<cstdlib>
 #include<cstdio>
 #include<cstring>
 #include<queue>
 using namespace std;
struct data{
  int x,y,st,dep;
  data(int X,int Y,int St,int Dep):x(X),y(Y),st(St),dep(Dep){}
 };
int a[9][2],b[25][25];
 int vis[21][21][1<<14];
 int n,m,L,cas=0;
 int dx[]={1,0,-1,0},dy[]={0,-1,0,1};
 int ass[9];
 int hash[]={2,3,0,1};
queue<data>q;
bool check(int x,int y,data t){
     int xx=t.x,yy=t.y,st=t.st;
     if(x==xx&&y==yy)return 1;
    for(int i=L-1;i>0;i--){
         ass[i]=st&3;
         st>>=2;
     }
    for(int i=1;i<L;i++){
         int k=hash[ass[i]];
         xx+=dx[k],yy+=dy[k];
         if(x==xx&&y==yy)return 1;
     }
     return 0;
 }
int bfs(data s){
     if(s.x==1&&s.y==1)return 0;
  while(!q.empty())q.pop();
  q.push(s);
  vis[s.x][s.y][s.st]=cas;
 while(!q.empty()){
   data u=q.front();
   q.pop();
   int x=u.x,y=u.y,st=u.st,dep=u.dep+1;
   for(int k=0;k<4;k++){
    int xx=x+dx[k],yy=y+dy[k];
    if(b[xx][yy]||check(xx,yy,u))continue;
    int t=(st>>2)+(k<<(2*L-4));
    if(vis[xx][yy][t]==cas)continue;
    if(xx==1&&yy==1)return dep;
    vis[xx][yy][t]=cas;
    data tp(xx,yy,t,dep);
    q.push(tp);
   }
  }
  return -1;
 }
int main(){
  while(scanf("%d%d%d",&n,&m,&L)!=EOF){
   if(n+m+L==0)break;
   int i,st=0;
   for(i=1;i<=L;i++)
    scanf("%d%d",&a[i][0],&a[i][1]);
   for(i=1;i<L;i++){
    int x=a[i][0],y=a[i][1],xx=a[i+1][0],yy=a[i+1][1],f;
    if(xx==x){
     if(yy==y-1)f=3;
     else f=1;
    }
    else {
     if(xx==x-1)f=0;
     else f=2;
    }
    st=(st<<2)+f;
   }
  int blo,x,y;
   scanf("%d",&blo);
   memset(b,0,sizeof(b));
   while(blo--){
    scanf("%d%d",&x,&y);
    b[x][y]=1;
   }
   for(i=1;i<=m;i++)b[0][i]=b[n+1][i]=1;
   for(i=1;i<=n;i++)b[i][0]=b[i][m+1]=1;
  data tp(a[1][0],a[1][1],st,0);
   ++cas;
   printf("Case %d: %d\n",cas,bfs(tp));
  }
  return 0;
 }
