[后缀数组、出现k次的重复子串]Pku3261 -- Milk Patterns_Fstephen的茶几_百度空间

http://acm.pku.edu.cn/JudgeOnline/problem?id=3261
题目大意：给出n个数字组成的一个字符串，求最长的恰好出现k次的重复子串（可重叠）的字符串的长度。
分析：后缀数组一个经典的应用。先二分答案，然后分组。只要某一组包含的后缀数量大于等于k，表示有解。这个不难理解。等完成了论文里面的练习之后，我再写个总结笔记吧。
深刻体会到后缀数组的强大....
note：1、分组时，每次height[i]<k时，第i个后缀是归到下一个组中的。
           2、scanf()返回的值是成功读取了多少个数据，如果文件结束了，返回EOF。一开始不知道这个，结果OLE= =
codes：
#include<stdio.h>
using namespace std;
const int maxn=20010;
int w[maxn*2],wa[maxn],wb[maxn],wv[maxn],sa[maxn],rank[maxn],height[maxn],a[maxn];
int n,m,k;
int cmp(int *r,int a,int b,int l){
    return r[a]==r[b]&&r[a+l]==r[b+l];
}
void da(int *r,int *sa,int n,int m){
     int i,j,p,*x=wa,*y=wb,*t;
     for (i=0;i<m;i++) w[i]=0;
     for (i=0;i<n;i++) w[x[i]=r[i]]++;
     for (i=1;i<m;i++) w[i]+=w[i-1];
     for (i=n-1;i>=0;i--) sa[--w[x[i]]]=i;
     for (p=1,j=1;p<n;j*=2,m=p){
         for (i=n-j,p=0;i<n;i++) y[p++]=i;
         for (i=0;i<n;i++) if (sa[i]>=j) y[p++]=sa[i]-j;
         for (i=0;i<m;i++) w[i]=0;
         for (i=0;i<n;i++) w[wv[i]=x[y[i]]]++;
         for (i=1;i<m;i++) w[i]+=w[i-1];
         for (i=n-1;i>=0;i--) sa[--w[wv[i]]]=y[i];
         for (t=x,x=y,y=t,x[sa[0]]=0,p=1,i=1;i<n;i++)
         x[sa[i]]=cmp(y,sa[i-1],sa[i],j)?p-1:p++;
         }
     return;
     }
void cal(int *r,int *sa,int n){
     int i,j,k=0;
     for (i=1;i<=n;i++) rank[sa[i]]=i;
     for (i=0;i<n;height[rank[i++]]=k)
         for (k?k--:0,j=sa[rank[i]-1];r[i+k]==r[j+k];k++);
     return;
     }
int check(int x){
    int i,cnt;
   for (i=1;i<=n;i++)
        if (height[i]<x) cnt=1;
        else
            if (++cnt>=k) return 1;
    if (cnt>=k) return 1;
    return 0;        
}                                                
int bin_search(int l,int r){
    int mid;
    for (mid=(r+l)>>1;l<=r;mid=(r+l)>>1)
        if (check(mid)) l=mid+1; else r=mid-1;
    return mid;
}
int main(){
    int i;
    while (scanf("%d %d",&n,&k)!=EOF){
          m=0;
          for (i=0;i<n;i++) 
          {
              scanf("%d",&a[i]);
              a[i]++;
              m=m>a[i]?m:a[i];
          }
          a[n]=0;
          m++;
          da(a,sa,n+1,m);
          cal(a,sa,n);
          int k=bin_search(0,n);
          printf("%d\n",k);
    }
    return 0;
}
