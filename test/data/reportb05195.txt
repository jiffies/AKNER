POJ 2379 ACM Rank Table(数据结构)_奔跑_新浪博客

Description
 

 ACM contests, like the one you are participating in, are hosted by the special software. That software, among other functions, preforms a job of accepting and evaluating teams' solutions (runs), and displaying results in a rank table. The scoring rules are as follows:
 
 
  
  Each run is either accepted or rejected.
 
  The problem is considered solved by the team, if one of the runs submitted for it is accepted.
 
  The time consumed for a solved problem is the time elapsed from the beginning of the contest to the submission of the first accepted run for this problem (in minutes) plus 20 minutes for every other run for this problem before the accepted one. For an unsolved problem consumed time is not computed.
 
  The total time is the sum of the time consumed for each problem solved.
 
  Teams are ranked according to the number of solved problems. Teams that solve the same number of problems are ranked by the least total time.
 
  While the time shown is in minutes, the actual time is measured to the precision of 1 second, and the the seconds are taken into account when ranking teams.
 
  Teams with equal rank according to the above rules must be sorted by increasing team number. 
  
 
 Your task is, given the list of N runs with submission time and result of each run, compute the rank table for C teams.
 
Input
 

 Input contains integer numbers C N, followed by N quartets of integes ci pi ti ri, where ci -- team number, pi -- problem number, ti -- submission time in seconds, ri -- 1, if the run was accepted, 0 otherwise.
 
 1 ≤ C, N ≤ 1000, 1 ≤ ci ≤ C, 1 ≤ pi ≤ 20, 1 ≤ ti ≤ 36000.
 

Output
 

 Output must contain C integers -- team numbers sorted by rank.
 

Sample Input
3 3
1 2 3000 0
1 2 3100 1
2 1 4200 1
Sample Output
2 1 3
我累个悲剧诶：竟然一直都理解错题意：关键：：1：要注意输入时间并不一定按升序，所以要对输入时间排序！！
2：如果做题数目相同，按所有做对题目的时间总和排序，这样才叫公平！！
3：只有该题接受时加罚时才有效；所以要注意去找到没有接收的题的加罚时，并加以忽略；
4：最后还要注意一道题也没有提交的队的队号存储！！！
#include<stdio.h>
 #include<stdlib.h>
 #include<string.h>
 struct stu1{
  int c1;
  int p1;
  int t1;
  int r1;
 }s1[1150];
 struct stu2{
  int p;//队号；
  int m[25];//解决的题号；
  int num;//解决的题目数；
  int t;//用的时间;
  int r[25];//对应题号的加罚时间；
 }s[1150];
 int cmp1(const void*a,const void*b)
 {
  struct stu1 *c,*d;
  c=(struct stu1 *)a;
  d=(struct stu1 *)b;
  if(c->t1!=d->t1)
  return c->t1-d->t1;
  else
   return c->r1-d->r1;
 }
 int cmp2(const void*a,const void*b)
 {
  struct stu2 *c,*d;
  c=(struct stu2 *)a;
  d=(struct stu2 *)b;
  if(c->num!=d->num)
   return d->num-c->num;//按解决题目数排序；
  else if( c->t!=d->t)
   return c->t-d->t;//相同题目数按时间升序排序；
  else
   return c->p-d->p;//解决题目数相同，时间也相同的，按队号排序；
 }
 int main()
 {
  int n,c,i;
  while(scanf("%d%d",&c,&n)!=-1)
  {
   memset(s,0,sizeof(s));
   for(i=0;i<n;i++)//n此输入
   {
    scanf("%d%d%d%d",&s1[i].c1,&s1[i].p1,&s1[i].t1,&s1[i].r1);
   }
   qsort(s1,n,sizeof(s1[0]),cmp1);
   for(i=0;i<n;i++)
   {
   if(s1[i].r1==0)//如果没有AC；
    {
     s[s1[i].c1-1].p=s1[i].c1;//对应队号的队号;
     if(s[s1[i].c1-1].m[s1[i].p1]==0)
     s[s1[i].c1-1].r[s1[i].p1]+=1200;//对应题号加上加罚时;
    }
    else//如接受；
    {
     s[s1[i].c1-1].p=s1[i].c1;
     if(!s[s1[i].c1-1].m[s1[i].p1])//如本对本题是第一次提交成功；
     {
        s[s1[i].c1-1].m[s1[i].p1]=s1[i].p1;//输入对应题号；
       s[s1[i].c1-1].t+=s[s1[i].c1-1].r[s1[i].p1];
       s[s1[i].c1-1].t+=s1[i].t1;//s[s1[i].c1-1].t+=s1[i].t1+s[s1[i].c1-1].r[s1[i].p1];//当前时间加上加罚时;
        s[s1[i].c1-1].num++;//解决题目数加一
     }
    }
   }
   for(i=0;i<c;i++)//将没有提交过的队的队号打上；
   {
    if(s[i].p==0)
     s[i].p=i+1;
   }
   qsort(s,c,sizeof(s[0]),cmp2);//排序
   for(i=0;i<c-1;i++)
    printf("%d ",s[i].p);
   printf("%d\n",s[c-1].p);
  }
  return 0;
 }
