pku 2987 Firing 最大权闭合图 dinic模板实现最小割_SZW的空间_百度空间

/**

problem: 公司要炒一些员工的鱿鱼, 若A被炒了, 那A的所有下属也会跟着被炒, 下属关系具有传递性,且可能构成环, 即A是B的下属, B又间接是A的下属, 炒掉每个人公司会得到一笔收益, 收益可能为负, 问在收益最大的前提下, 最少要炒掉哪些人, 以及最大收益是多少. ——copy

具体解法我就不说了，在刘汝佳黑书上的“航天计划”是一个类型。

我讲一下注意点：首先是数据类型，中间结果会超过int，可用long long 代替；其次，数据量比较大，宁可开大点，也不要斤斤计较.我就为此付出了好几次tle，我也不知道为什么是tle,害得我找不出错误。

*/

#include <stdio.h>

#include <iostream>

#include <string.h>

#include <memory.h>

using namespace std;

const int inf = 1000000000;       // max of cost

const int N=5005;

const int E=200005;

struct edge

{

int x, y, nxt;

int c;

} bf[E];

int ne, head[N], cur[N], ps[N], dep[N];

bool flag[N];

inline void addedge(int x, int y, int c)

{   // add an arc(x -> y, c); vertex: 0 ~ n-1;

bf[ne].x = x; bf[ne].y = y; bf[ne].c = c;

bf[ne].nxt = head[x]; head[x] = ne++;

bf[ne].x = y; bf[ne].y = x; bf[ne].c = 0;

bf[ne].nxt = head[y]; head[y] = ne++;

}

long long flow(int n, int s, int t)

{

long long res = 0;

int tr;

int i, j, k, f, r, top;

while (1)

{

memset(dep, -1, n * sizeof(int));

for (f = dep[ps[0] = s] = 0, r = 1; f != r; )

for (i = ps[f++], j = head[i]; j; j = bf[j].nxt)

{

if (bf[j].c && -1 == dep[k = bf[j].y])

{

dep[k] = dep[i] + 1; ps[r++] = k;

if (k == t) { f = r; break; }

}

}

if (-1 == dep[t]) break;

memcpy(cur, head, n * sizeof(int));

for (i = s, top = 0; ; )

{

if (i == t)

{

for (k = 0, tr = inf; k < top; ++k)

if (bf[ps[k]].c < tr)

tr = bf[ps[f = k]].c;

for (k = 0; k < top; ++k)

bf[ps[k]].c -= tr, bf[ps[k]^1].c += tr;

res += tr;

i = bf[ps[top = f]].x;

}

for  (j=cur[i];  cur[i];  j  =  cur[i]  =  bf[cur[i]].nxt)

if  (bf[j].c  &&  dep[i]+1  ==  dep[bf[j].y])  break;

if (cur[i])

{

ps[top++] = cur[i];

i = bf[cur[i]].y;

}

else

{

if (0 == top) break;

dep[i] = -1; i = bf[ps[--top]].x;

}

}

}

return res;

}

void dfs(int v)

{

flag[v]=true;

for(int i=head[v];i!=0;i=bf[i].nxt)  //循环写错，错误难找，害人阿

{

if(!flag[bf[i].y] && bf[i].c>0)

{

//printf("%d %d\n",bf[i].y,bf[i].c);

dfs(bf[i].y);

}

}

}

int main()

{

int s,t,a,b,c;

int n,m;

long long sum;

while(scanf("%d%d",&n,&m)!=EOF)

{

//init

memset(head,0,sizeof(head));

memset(flag,false,sizeof(flag));

ne=2;

 //build graph

s=0;t=n+1;sum=0;

for(int i=1;i<=n;i++)

{

scanf("%d",&c);

if(c>0)

addedge(s,i,c),sum+=c;

else

addedge(i,t,-c);

}

for(int i=0;i<m;i++)

{

scanf("%d%d",&a,&b);

addedge(a,b,inf);

}

long long rec=flow(n+2,0,n+1);

int cnt=0;

dfs(0);

for(int i=1;i<=n;i++)

if(flag[i])  cnt++;

printf("%d %lld\n",cnt,sum-rec);

}

return 0;

}

